# Fetching VM lease start/get/end metrics and calculating duration. Split into multiple sections with copy-pase code
# as advanced ruby stuff like ['vm_lease', 'deploy', 'fitnesse'].each { some_code } doesn't work good in ruby filter
filter {
  if [type] == "remote_logs" and [subtype] == "jenkins_console" and [job_name] =~ /.*-SMOKE-.*/ {
    grok {
        match => ["message", "(\[INFO\] (?<vm_lease_start>%{TIME}) Provisioning node)"]
    }
    grok {
        match => ["message", "(\[INFO\] (?<vm_lease_got>%{TIME}) (Provisioned via pool|Allocated from pool))"]
    }
    grok {
        match => ["message", "(\[INFO\] (?<vm_lease_end>%{TIME}) (Release VM|Dispose VM))"]
    }
  }
}
filter {
  if [vm_lease_start] and [vm_lease_end] {
    ruby {
        code => "require 'time'; duration = Time.parse(event['vm_lease_end']) - Time.parse(event['vm_lease_start']); event['vm_lease_duration'] = (duration / 60).round"
    }
  }
}

# Fetching deploy start/end metrics and calculating duration
filter {
  if [type] == "remote_logs" and [subtype] == "jenkins_console" and [job_name] =~ /.*-SMOKE-.*/ {
    grok {
        match => ["message", "(\[INFO\] (?<deploy_start>%{TIME}) Initiating remote deployment)"]
    }
    grok {
        match => ["message", "(\[INFO\] (?<deploy_end>%{TIME}) Collecting deploy-logs and configs)"]
    }
  }
}
filter {
  if [deploy_start] and [deploy_end] {
    ruby {
        code => "require 'time'; duration = Time.parse(event['deploy_end']) - Time.parse(event['deploy_start']); event['deploy_duration'] = (duration / 60).round"
    }
  }
}

# Fetching fitnesse start/end metrics and calculating duration
filter {
  if [type] == "remote_logs" and [subtype] == "jenkins_console" and [job_name] =~ /.*-SMOKE-.*/ {

    grok {
        match => ["message", "(\[INFO\] (?<fitnesse_start>%{TIME}) Executing Fitnesse tests)"]
    }
    grok {
        match => ["message", "(\[INFO\] (?<fitnesse_end>%{TIME}) Downloading fitnesse stuff)"]
    }
  }
}
filter {
  if [fitnesse_start] and [fitnesse_end] {
    ruby {
        code => "require 'time'; duration = Time.parse(event['fitnesse_end']) - Time.parse(event['fitnesse_start']); event['fitnesse_duration'] = (duration / 60).round"
    }
  }
}
